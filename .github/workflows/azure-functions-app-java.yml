# This workflow will build a Java project and deploy it to an Azure Functions App on Windows or Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-java
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: maqsoftwareazure

on:
  schedule:
    - cron: '0 0 * * *'  # Trigger every day at midnight (adjust as needed)
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: 'maqsoftware'   # Replace with your Azure function app name
  POM_XML_DIRECTORY: 'maqsoftware-app'                     # Set this to the directory that contains your pom.xml (adjust as needed)
  DISTRIBUTION: 'microsoft'                       # Set this to the Java version distribution to use (e.g. 'zulu', 'temurin', 'microsoft')
  JAVA_VERSION: '21'                         # Set this to the Java version to use (e.g. '8', '11', '17')

jobs:
  build-and-deploy:
    runs-on: windows-latest  # For Linux, use ubuntu-latest
    environment: dev
    steps:
      # Step 1: Checkout the repository
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      # Step 2: Setup Java SDK
      - name: Setup Java SDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      # Step 3: Restore project dependencies using Maven
      - name: 'Restore Project Dependencies Using Mvn'
        shell: pwsh  # For Linux, use bash
        run: |
          pushd '${{ env.POM_XML_DIRECTORY }}'  # Navigate to the directory containing pom.xml
          mvn clean package  # Build the project
          popd  # Go back to the original directory

      # Step 4: Deploy to Azure Function App
      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: '${{ env.POM_XML_DIRECTORY }}/target/azure-functions'  # Adjust the path based on your function app location
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}  # Use this if using publish-profile method
          respect-pom-xml: true  # Ensure the deployment respects the pom.xml configurations

